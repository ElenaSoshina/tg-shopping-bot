const { Telegraf } = require('telegraf');

const TOKEN = '7601273394:AAH3sxGHfD_mUxpBGyaZIx9EraGWAeD8I60';
const bot = new Telegraf(TOKEN);
const webLink = 'https://elenasoshina.github.io/tg-shopping/';

// –¢–∞–∫–æ–π –∂–µ mapping, –∫–∞–∫ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ
const unitMapping = {
    cheese: '—à—Ç',
    fish: '–≥',
    lemon: '—É–ø',
};

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –∫–ª—é—á–µ–π —Ç–æ–ø–ø–∏–Ω–≥–∞
function decodeTopping(topping) {
    switch (topping) {
        case 'sourCream':       return '–ô–æ–≥—É—Ä—Ç';
        case 'condensedMilk':   return '–°–≥—É—â–µ–Ω–∫–∞';
        case 'passionFruitJam': return '–î–∂–µ–º –∏–∑ –º–∞—Ä–∞–∫—É–π–∏';
        default:                return topping;
    }
}

bot.start((ctx) => {
    console.log('started');
    const username = ctx.from.username
        ? `@${ctx.from.username}`
        : ctx.from.first_name
            ? ctx.from.first_name
            : '–ì–æ—Å—Ç—å';

    const welcomeMessage = `üåü –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º ${username} –≤ –Ω–∞—à–µ–º –≥–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–º —Ä–∞–π–µ –ú—É–π–Ω–µ! üåü
    üêü –ù–µ–∂–Ω—ã–π –Ω–æ—Ä–≤–µ–∂—Å–∫–∏–π –ª–æ—Å–æ—Å—å ‚Äî –∏—Å—Ç–∏–Ω–Ω–æ–µ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –¥–ª—è –≥—É—Ä–º–∞–Ω–æ–≤.
    ü•û –°—ã—Ä–Ω–∏–∫–∏ –∏–∑ –¥–æ–º–∞—à–Ω–µ–≥–æ —Ç–≤–æ—Ä–æ–≥–∞ ‚Äî –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ –∏ –≥–æ—Ç–æ–≤—ã–µ –∫ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é.
    üçã –û—Å–≤–µ–∂–∞—é—â–∏–µ –ª–∏–º–æ–Ω—ã ‚Äî –∏–¥–µ–∞–ª—å–Ω—ã–π –∞–∫—Ü–µ–Ω—Ç –¥–ª—è –ª—é–±–æ–≥–æ –±–ª—é–¥–∞.
    üëá –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –∏ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑. üëá`;

    ctx.reply(welcomeMessage, {
        reply_markup: {
            keyboard: [
                [{ text: '–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é', web_app: { url: webLink } }]
            ],
            resize_keyboard: true,
            one_time_keyboard: false
        }
    });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö
bot.on('message', async (ctx) => {
    console.log("[DEBUG] –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –æ—Ç WebApp:", JSON.stringify(ctx.update, null, 2));

    if (ctx.update.message?.web_app_data) {
        try {
            const rawDataString = ctx.update.message.web_app_data.data;
            console.log("[WEB APP DATA RECEIVED] Raw data string:", rawDataString);

            const rawData = JSON.parse(rawDataString);
            console.log("[WEB APP DATA PARSED] Parsed rawData:", rawData);

            if (!rawData.items || !Array.isArray(rawData.items)) {
                throw new Error('Invalid data: "items" must be an array.');
            }

            // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
            const items = rawData.items.map(item => {
                // –ï—Å–ª–∏ —Ç–∏–ø = 'fish', –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ ¬´–õ–æ—Å–æ—Å—å¬ª
                let displayTitle = item.title;
                if (item.type === 'fish') {
                    displayTitle = `–õ–æ—Å–æ—Å—å ${item.title}`;
                }

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—ã
                const quantityUnit = unitMapping[item.type] || '';

                // –ë–µ—Ä—ë–º –∏—Ç–æ–≥–æ–≤—É—é —Ü–µ–Ω—É –∏–∑ item.total (—Ç.–∫. –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ —É–∂–µ –ø–æ—Å—á–∏—Ç–∞–Ω–æ)
                const itemTotalNumber = Number(item.total);
                const itemTotalStr = itemTotalNumber.toLocaleString('ru-RU', {
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                });

                // –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–ø–ø–∏–Ω–≥–∏
                const decodedToppings = item.toppings?.map(decodeTopping) || [];
                const toppingsText = decodedToppings.length
                    ? ` (–¢–æ–ø–ø–∏–Ω–≥–∏: ${decodedToppings.join(', ')})`
                    : '';

                return `${displayTitle} ‚Äî ${item.quantity} ${quantityUnit} ‚Äî ${itemTotalStr} VND${toppingsText}`;
            });

            // –û–±—â–∞—è –∏—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑ —Ñ—Ä–æ–Ω—Ç–∞
            const finalTotalPriceString = Number(rawData.totalPrice).toLocaleString('ru-RU', {
                minimumFractionDigits: 2,
                maximumFractionDigits: 2
            });

            // –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            const clientMessage = `üõí *–í–∞—à –∑–∞–∫–∞–∑:*\n\n${items.join('\n')}\n\nüí≥ *–ò—Ç–æ–≥–æ:* ${finalTotalPriceString} VND`;
            await ctx.reply(clientMessage, {
                parse_mode: 'Markdown',
                reply_markup: {
                    keyboard: [
                        [{ text: '–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é', web_app: { url: webLink } }]
                    ],
                    resize_keyboard: true,
                    one_time_keyboard: false
                }
            });

            // –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            const username = ctx.from.username
                ? `@${ctx.from.username}`
                : ctx.from.first_name
                    ? ctx.from.first_name
                    : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

            const nameFromForm = rawData.name || '‚Äî';
            const phoneFromForm = rawData.phone || '‚Äî';
            const isDelivery = rawData.deliveryMethod === 'delivery';
            const deliveryMethodText = isDelivery ? '–î–æ—Å—Ç–∞–≤–∫–∞' : '–°–∞–º–æ–≤—ã–≤–æ–∑';
            const addressFromForm = isDelivery && rawData.address ? rawData.address : '';

            const adminMessage = `
üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${username}
üßë <b>–ò–º—è:</b> ${nameFromForm}
‚òéÔ∏è <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phoneFromForm}
${isDelivery ? `üöö <b>–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è:</b> –î–æ—Å—Ç–∞–≤–∫–∞\nüìç <b>–ê–¥—Ä–µ—Å:</b> ${addressFromForm}` : `üëú <b>–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è:</b> –°–∞–º–æ–≤—ã–≤–æ–∑`}

üõí <b>–ó–∞–∫–∞–∑:</b>
${items.join('\n')}

üí≥ <b>–ò—Ç–æ–≥–æ:</b> ${finalTotalPriceString} VND
`.trim();

            const adminChatId = '8175921251';
            await bot.telegram.sendMessage(adminChatId, adminMessage, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [[
                        {
                            text: '–ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é',
                            url: `tg://user?id=${ctx.from.id}`
                        }
                    ]]
                }
            });

        } catch (error) {
            console.error('[ERROR] Processing WebApp data:', error.message);
            await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞.');
        }
    }
});

bot.launch().then(() => {
    console.log('Bot is running...');
});
